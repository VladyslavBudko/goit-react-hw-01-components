// 1 - Профиль социальной сети
// Необходимо создать компонент Profile

// username — имя пользователя
// tag — тег в социальной сети без @
// location — город и страна
// avatar — ссылка на изображение
// stats — объект с информацией об активности

// Пример использования
// import user from 'path/to/user.json;

// <Profile
//   username={user.username}
//   tag={user.tag}
//   location={user.location}
//   avatar={user.avatar}
//   stats={user.stats}
// />



// 2- Секция статистики
// Создать компонет Statistics

// Описание компонента Statistics
// Компонент должен принимать два пропа title и stats, в которых указывается заголовок и объект статистики.

// title - не обязателен, и если он не передан, не должна рендериться разметка заголовка <h2>.
// stats - массив объектов содержащих информацию о элементе статистики. Может иметь произвольное кол-во элементов.
// Цвет фона элемента статистики в оформлении можно пропустить, либо создать функцию для генерации случайного цвета.

// Пример использования
// import data from '/path/to/data.json';

// <Statistics title="Upload stats" stats={data} />
// <Statistics stats={data} />


// 3 - Список друзей
// Необходимо создать компонент FriendList

// Описание компонента FriendList
// Компонент должен принимать один пропс friends - массив объектов друзей.

// Компонент должен создавать DOM следующей структуры.
// <ul class="friend-list">
//   <!-- Произвольное кол-во FriendListItem -->
// </ul>

// Описание компонента FriendListItem
// Компонент должен принимать несколько пропов:
// avatar - ссылка на аватар
// name - имя друга
// isOnline - буль сигнализирующий о состоянии друга, в сети или нет.
// В зависимости от пропа isOnline, должен меняться цвет фона span.status.
//  Это можно сделать через разный CSS-класс или Styled Components.


// Пример использования
// import friends from "path/to/friends.json";

// <FriendList friends={friends} />;




// 4 - История транзакций
// Необходимо создать компонент истории транзакций в личном кабинете интернет банка.

// Данные для списка доступны в формате JSON в файле transactions.json. 
// Это массив объектов, где каждый объект описывает одну транзакцию со следующими свойствами:

// id — уникальный идентификатор транзакции
// type — тип транзакции
// amount - сумма транзакции
// currency - тип валюты
// Описание компонента TransactionHistory
// Необходимо создать компонент TransactionHistory принимающий один проп items - массив объектов транзакций из transactions.json. 
// Компонент создает разметку таблицы. Каждая транзакция это строка таблицы. 


// Пример использования
// import transactions from "path/to/transactions.json";

// <TransactionHistory items={transactions} />;